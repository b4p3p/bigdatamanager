#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('bigdatamanager:server');
var http = require('http');

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '8080');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

var io = require('socket.io')();
io.listen(server);

app.io = io;

io.sockets.on('connection', function(socket) {

    var Summary = require('../model/Summary');

    socket.emit('message', {'message': 'hello world'});

    socket.on('newproject', function(data) {
        //process.stdout.write("pippo");
        socket.emit( 'newproject', {project:'pippo'} );
        socket.emit( 'newproject', {project:'pippo'} );
    });

    socket.on('filteredstat', function(data) {

        var store = app.store;
        var project = store.get('project');

        console.log("CALL: socket.on -> filteredstat");

        if(data.queryString == "")
        {
            if (req.session.project)
                Summary.getStat(req.session.project, function (err, data) {
                    socket.emit( 'filteredstat', data );
                });
        }
    });

});

/**
 *  Create Uploader Controller
 */

// require("../controller/UploaderCtrl")(server, app);

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
